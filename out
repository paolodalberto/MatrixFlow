
    rocblas_status rocblas_dgemm(
        rocblas_handle handle, 
        rocblas_operation transA, 
        rocblas_operation transB, 
        rocblas_int m, 
        rocblas_int n, 
        rocblas_int k, 
        const double *alpha, 
        const double *A, 
        rocblas_int lda, 
        const double *B, 
        rocblas_int ldb, 
        const double *beta, 
        double *C, 
        rocblas_int ldc) 

    rocblas_status rocblas_dgema(
        rocblas_handle handle, 
        rocblas_operation transA, 
        rocblas_operation transB, 
        rocblas_int m, 
        rocblas_int n, 
        rocblas_int k, 
        const double *alpha, 
        const double *A, 
        rocblas_int lda, 
        const double *B, 
        rocblas_int ldb, 
        const double *beta, 
        double *C, 
        rocblas_int ldc) 
rocblas_dgemm( %s, 'n', 'n', %d, %d, %d,  %s, %s, %d, %s, %d,  %s, %s, %d) 
rocblas_dgema( %s, 'n', 'n', %d, %d, %d  %s, %s, %d,  %s, %s, %s,  %s, %d) 

 Fast Matrix Multiplication MxK * KxN -> MxN 
 Introduce --M --K --N
 We show case the rest
60
compute
time 0.00011229515075683594
(4, 7)
(30, 30) float64 7 TEMP SPACE GB 2.346932888031006e-05
Compute
compute 0.0004057884216308594
Dependency
Ts[0]<<ADP[0]+ADP[2]
Ts[0]<<Ts[0]-ADP[3]
Ts[1]<<BDP[1]+BDP[2]
Ts[1]<<Ts[1]+BDP[3]
Pss[1]<<Ts[0]*Ts[1];
rocblas_dgema( gpu0, 'n', 'n', 30, 30, 30  &z_1, ADP[0], 60,  ADP[2], 60, &z_1,  Ts[0], 30) 
rocblas_dgema( gpu0, 'n', 'n', 30, 30, 30  &z_1, Ts[0], 30,  ADP[3], 60, &z_2,  Ts[0], 30) 
rocblas_dgema( gpu0, 'n', 'n', 30, 30, 30  &z_1, BDP[1], 60,  BDP[2], 60, &z_1,  Ts[1], 30) 
rocblas_dgema( gpu0, 'n', 'n', 30, 30, 30  &z_1, Ts[1], 30,  BDP[3], 60, &z_1,  Ts[1], 30) 
rocblas_dgemm( gpu0, 'n', 'n', 30, 30, 30,  &z_1, Ts[0], 30, Ts[1], 30,  zero, Pss[1], 30) 
## declaration 
# double* ADP[4]; ADP[0]= A+60*0 +0;ADP[1]= A+60*0 +30;ADP[2]= A+60*30 +0;ADP[3]= A+60*30 +30;
# double* BDP[4]; BDP[0]= B+60*0 +0;BDP[1]= B+60*0 +30;BDP[2]= B+60*30 +0;BDP[3]= B+60*30 +30;
# double* CDP[4]; CDP[0]= C+60*0 +0;CDP[1]= C+60*30 +0;CDP[2]= C+60*0 +30;CDP[3]= C+60*30 +30;
# double* Pss[7]; Pss[0]= (double*)malloc (30*30*sizeof(double));Pss[1]= (double*)malloc (30*30*sizeof(double));Pss[2]= (double*)malloc (30*30*sizeof(double));Pss[3]= (double*)malloc (30*30*sizeof(double));Pss[4]= (double*)malloc (30*30*sizeof(double));Pss[5]= (double*)malloc (30*30*sizeof(double));Pss[6]= (double*)malloc (30*30*sizeof(double));
# double* Ts[2]; Ts[0]= (double*)malloc (30*30*sizeof(double));Ts[1]= (double*)malloc (30*30*sizeof(double));
## code 
### Pss[0] << (ADP[2] - ADP[3]) * (BDP[1])
Ts[0]<<ADP[2]-ADP[3]
Pss[0]<<Ts[0]*BDP[1];
### Pss[1] << (ADP[0] + ADP[2] - ADP[3]) * (BDP[1] + BDP[2] + BDP[3])
Ts[0]<<ADP[0]+ADP[2]
Ts[0]<<Ts[0]-ADP[3]
Ts[1]<<BDP[1]+BDP[2]
Ts[1]<<Ts[1]+BDP[3]
Pss[1]<<Ts[0]*Ts[1];
### Pss[2] << (ADP[0] + ADP[2] - ADP[1] - ADP[3]) * (BDP[2] + BDP[3])
Ts[0]<<ADP[0]+ADP[2]
Ts[0]<<Ts[0]-ADP[1]
Ts[0]<<Ts[0]-ADP[3]
Ts[1]<<BDP[2]+BDP[3]
Pss[2]<<Ts[0]*Ts[1];
### Pss[3] << (ADP[1]) * (BDP[2])
Pss[3]<<ADP[1]*BDP[2];
### Pss[4] << (ADP[0] + ADP[2]) * (BDP[0] + BDP[1] + BDP[2] + BDP[3])
Ts[0]<<ADP[0]+ADP[2]
Ts[1]<<BDP[0]+BDP[1]
Ts[1]<<Ts[1]+BDP[2]
Ts[1]<<Ts[1]+BDP[3]
Pss[4]<<Ts[0]*Ts[1];
### Pss[5] << (ADP[0]) * (BDP[0])
Pss[5]<<ADP[0]*BDP[0];
### Pss[6] << (ADP[3]) * (BDP[1] + BDP[3])
Ts[1]<<BDP[1]+BDP[3]
Pss[6]<<ADP[3]*Ts[1];
### CDP[0] += Pss[3] + Pss[5]
Ts[0]<<Pss[3]+Pss[5]
CDP[0]+=Ts[0];
### CDP[1] += Pss[4] - Pss[1] - Pss[5] - Pss[6]
Ts[0]<<Pss[4]-Pss[1]
Ts[0]<<Ts[0]-Pss[5]
Ts[0]<<Ts[0]-Pss[6]
CDP[1]+=Ts[0];
### CDP[2] += Pss[1] - Pss[0] - Pss[2] - Pss[3]
Ts[0]<<Pss[1]-Pss[0]
Ts[0]<<Ts[0]-Pss[2]
Ts[0]<<Ts[0]-Pss[3]
CDP[2]+=Ts[0];
### CDP[3] += Pss[0] + Pss[6]
Ts[0]<<Pss[0]+Pss[6]
CDP[3]+=Ts[0];
## free free(Pss[0]); free(Pss[1]); free(Pss[2]); free(Pss[3]); free(Pss[4]); free(Pss[5]); free(Pss[6]); free(Ts[0]); free(Ts[1]); 
(4, 7)
(20, 20) float64 TEMP SPACE GB 1.4901161193847656e-06
Compile 0.0017385482788085938
compute_time 0.0016353130340576172 GFLOPS 0.26416960606502404
Dependency
## declaration 
# double* ADP[9]; ADP[0]= A+60*0 +0;ADP[1]= A+60*0 +20;ADP[2]= A+60*0 +40;ADP[3]= A+60*20 +0;ADP[4]= A+60*20 +20;ADP[5]= A+60*20 +40;ADP[6]= A+60*40 +0;ADP[7]= A+60*40 +20;ADP[8]= A+60*40 +40;
# double* BDP[9]; BDP[0]= B+60*0 +0;BDP[1]= B+60*0 +20;BDP[2]= B+60*0 +40;BDP[3]= B+60*20 +0;BDP[4]= B+60*20 +20;BDP[5]= B+60*20 +40;BDP[6]= B+60*40 +0;BDP[7]= B+60*40 +20;BDP[8]= B+60*40 +40;
# double* CDP[9]; CDP[0]= C+60*0 +0;CDP[1]= C+60*20 +0;CDP[2]= C+60*40 +0;CDP[3]= C+60*0 +20;CDP[4]= C+60*20 +20;CDP[5]= C+60*40 +20;CDP[6]= C+60*0 +40;CDP[7]= C+60*20 +40;CDP[8]= C+60*40 +40;
# double* Pss[1]; Pss[0]= (double*)malloc (20*20*sizeof(double));
# double* Ts[2]; Ts[0]= (double*)malloc (20*20*sizeof(double));Ts[1]= (double*)malloc (20*20*sizeof(double));
## code 
### Pss[0] << (ADP[7]) * (BDP[1] + BDP[4] - BDP[3])
Ts[1]<<BDP[1]+BDP[4]
Ts[1]<<Ts[1]-BDP[3]
Pss[0]<<ADP[7]*Ts[1];
### CDP[4] << CDP[4] + Pss[0]
CDP[4]+Pss[0]<<CDP[4]+Pss[0]
CDP[4]<<CDP[4]+Pss[0];
### CDP[5] << CDP[5] + Pss[0]
CDP[5]+Pss[0]<<CDP[5]+Pss[0]
CDP[5]<<CDP[5]+Pss[0];
### CDP[8] << CDP[8] - Pss[0]
CDP[8]-Pss[0]<<CDP[8]-Pss[0]
CDP[8]<<CDP[8]-Pss[0];
### Pss[0] << (ADP[0] + ADP[7] - ADP[6]) * (BDP[1] + BDP[4] + BDP[5] + (BDP[3]) * (-2))
Ts[0]<<ADP[0]+ADP[7]
Ts[0]<<Ts[0]-ADP[6]
Ts[1]<<BDP[1]+BDP[4]
Ts[1]<<Ts[1]+BDP[5]
Ts[1]<<Ts[1]+BDP[3]*-2
Pss[0]<<Ts[0]*Ts[1];
### CDP[3] << CDP[3] + Pss[0]
CDP[3]+Pss[0]<<CDP[3]+Pss[0]
CDP[3]<<CDP[3]+Pss[0];
### CDP[8] << CDP[8] + Pss[0]
CDP[8]+Pss[0]<<CDP[8]+Pss[0]
CDP[8]<<CDP[8]+Pss[0];
### Pss[0] << (ADP[4] - ADP[5] - ADP[7]) * (BDP[3] + BDP[7])
Ts[0]<<ADP[4]-ADP[5]
Ts[0]<<Ts[0]-ADP[7]
Ts[1]<<BDP[3]+BDP[7]
Pss[0]<<Ts[0]*Ts[1];
### CDP[2] << CDP[2] - Pss[0]
CDP[2]-Pss[0]<<CDP[2]-Pss[0]
CDP[2]<<CDP[2]-Pss[0];
### CDP[4] << CDP[4] - Pss[0]
CDP[4]-Pss[0]<<CDP[4]-Pss[0]
CDP[4]<<CDP[4]-Pss[0];
### CDP[5] << CDP[5] - Pss[0]
CDP[5]-Pss[0]<<CDP[5]-Pss[0]
CDP[5]<<CDP[5]-Pss[0];
### CDP[8] << CDP[8] - Pss[0]
CDP[8]-Pss[0]<<CDP[8]-Pss[0]
CDP[8]<<CDP[8]-Pss[0];
### Pss[0] << (ADP[1]) * (BDP[3] - BDP[5])
Ts[1]<<BDP[3]-BDP[5]
Pss[0]<<ADP[1]*Ts[1];
### CDP[3] << CDP[3] + Pss[0]
CDP[3]+Pss[0]<<CDP[3]+Pss[0]
CDP[3]<<CDP[3]+Pss[0];
### CDP[7] << CDP[7] + Pss[0]
CDP[7]+Pss[0]<<CDP[7]+Pss[0]
CDP[7]<<CDP[7]+Pss[0];
### CDP[6] << CDP[6] - Pss[0]
CDP[6]-Pss[0]<<CDP[6]-Pss[0]
CDP[6]<<CDP[6]-Pss[0];
### Pss[0] << (ADP[1] + ADP[4] - ADP[5]) * (BDP[3] + BDP[8])
Ts[0]<<ADP[1]+ADP[4]
Ts[0]<<Ts[0]-ADP[5]
Ts[1]<<BDP[3]+BDP[8]
Pss[0]<<Ts[0]*Ts[1];
### CDP[0] << CDP[0] + Pss[0]
CDP[0]+Pss[0]<<CDP[0]+Pss[0]
CDP[0]<<CDP[0]+Pss[0];
### CDP[3] << CDP[3] + Pss[0]
CDP[3]+Pss[0]<<CDP[3]+Pss[0]
CDP[3]<<CDP[3]+Pss[0];
### CDP[6] << CDP[6] + Pss[0]
CDP[6]+Pss[0]<<CDP[6]+Pss[0]
CDP[6]<<CDP[6]+Pss[0];
### CDP[7] << CDP[7] - Pss[0]
CDP[7]-Pss[0]<<CDP[7]-Pss[0]
CDP[7]<<CDP[7]-Pss[0];
### Pss[0] << (ADP[4] + ADP[8] - ADP[5] - ADP[7]) * (BDP[7])
Ts[0]<<ADP[4]+ADP[8]
Ts[0]<<Ts[0]-ADP[5]
Ts[0]<<Ts[0]-ADP[7]
Pss[0]<<Ts[0]*BDP[7];
### CDP[2] << CDP[2] + Pss[0]
CDP[2]+Pss[0]<<CDP[2]+Pss[0]
CDP[2]<<CDP[2]+Pss[0];
### CDP[5] << CDP[5] + Pss[0]
CDP[5]+Pss[0]<<CDP[5]+Pss[0]
CDP[5]<<CDP[5]+Pss[0];
### CDP[8] << CDP[8] + Pss[0]
CDP[8]+Pss[0]<<CDP[8]+Pss[0]
CDP[8]<<CDP[8]+Pss[0];
### Pss[0] << (ADP[8]) * (BDP[0] + BDP[7] - BDP[6])
Ts[1]<<BDP[0]+BDP[7]
Ts[1]<<Ts[1]-BDP[6]
Pss[0]<<ADP[8]*Ts[1];
### CDP[2] << CDP[2] - Pss[0]
CDP[2]-Pss[0]<<CDP[2]-Pss[0]
CDP[2]<<CDP[2]-Pss[0];
### CDP[8] << CDP[8] - Pss[0]
CDP[8]-Pss[0]<<CDP[8]-Pss[0]
CDP[8]<<CDP[8]-Pss[0];
### Pss[0] << (ADP[0] - ADP[6] - ADP[8]) * (BDP[0] + BDP[8] - BDP[6])
Ts[0]<<ADP[0]-ADP[6]
Ts[0]<<Ts[0]-ADP[8]
Ts[1]<<BDP[0]+BDP[8]
Ts[1]<<Ts[1]-BDP[6]
Pss[0]<<Ts[0]*Ts[1];
### CDP[0] << CDP[0] + Pss[0]
CDP[0]+Pss[0]<<CDP[0]+Pss[0]
CDP[0]<<CDP[0]+Pss[0];
### CDP[8] << CDP[8] - Pss[0]
CDP[8]-Pss[0]<<CDP[8]-Pss[0]
CDP[8]<<CDP[8]-Pss[0];
### Pss[0] << (ADP[1] + ADP[4] - ADP[2] - ADP[5]) * (BDP[8])
Ts[0]<<ADP[1]+ADP[4]
Ts[0]<<Ts[0]-ADP[2]
Ts[0]<<Ts[0]-ADP[5]
Pss[0]<<Ts[0]*BDP[8];
### CDP[0] << CDP[0] - Pss[0]
CDP[0]-Pss[0]<<CDP[0]-Pss[0]
CDP[0]<<CDP[0]-Pss[0];
### CDP[3] << CDP[3] - Pss[0]
CDP[3]-Pss[0]<<CDP[3]-Pss[0]
CDP[3]<<CDP[3]-Pss[0];
### CDP[6] << CDP[6] - Pss[0]
CDP[6]-Pss[0]<<CDP[6]-Pss[0]
CDP[6]<<CDP[6]-Pss[0];
### Pss[0] << (ADP[6] - ADP[7]) * (BDP[1])
Ts[0]<<ADP[6]-ADP[7]
Pss[0]<<Ts[0]*BDP[1];
### CDP[3] << CDP[3] + Pss[0]
CDP[3]+Pss[0]<<CDP[3]+Pss[0]
CDP[3]<<CDP[3]+Pss[0];
### CDP[4] << CDP[4] + Pss[0]
CDP[4]+Pss[0]<<CDP[4]+Pss[0]
CDP[4]<<CDP[4]+Pss[0];
### CDP[5] << CDP[5] + Pss[0]
CDP[5]+Pss[0]<<CDP[5]+Pss[0]
CDP[5]<<CDP[5]+Pss[0];
### Pss[0] << (ADP[6] + ADP[8]) * (BDP[0])
Ts[0]<<ADP[6]+ADP[8]
Pss[0]<<Ts[0]*BDP[0];
### CDP[0] << CDP[0] + Pss[0]
CDP[0]+Pss[0]<<CDP[0]+Pss[0]
CDP[0]<<CDP[0]+Pss[0];
### CDP[2] << CDP[2] + Pss[0]
CDP[2]+Pss[0]<<CDP[2]+Pss[0]
CDP[2]<<CDP[2]+Pss[0];
### CDP[1] << CDP[1] + (Pss[0]) * (-2)
CDP[1]+Pss[0]*-2<<CDP[1]+Pss[0]*-2
CDP[1]<<CDP[1]+Pss[0]*-2;
### Pss[0] << (ADP[0] + ADP[7] - ADP[1] - ADP[6]) * ((BDP[3]) * (2) - BDP[4] - BDP[5])
Ts[0]<<ADP[0]+ADP[7]
Ts[0]<<Ts[0]-ADP[1]
Ts[0]<<Ts[0]-ADP[6]
Ts[1]<<BDP[3]*2-BDP[4]
Ts[1]<<Ts[1]-BDP[5]
Pss[0]<<Ts[0]*Ts[1];
### CDP[3] << CDP[3] + Pss[0]
CDP[3]+Pss[0]<<CDP[3]+Pss[0]
CDP[3]<<CDP[3]+Pss[0];
### Pss[0] << (ADP[0] + ADP[2] - ADP[6] - ADP[8]) * (BDP[6] - BDP[8])
Ts[0]<<ADP[0]+ADP[2]
Ts[0]<<Ts[0]-ADP[6]
Ts[0]<<Ts[0]-ADP[8]
Ts[1]<<BDP[6]-BDP[8]
Pss[0]<<Ts[0]*Ts[1];
### CDP[0] << CDP[0] + Pss[0]
CDP[0]+Pss[0]<<CDP[0]+Pss[0]
CDP[0]<<CDP[0]+Pss[0];
### Pss[0] << (ADP[0]) * (BDP[2])
Pss[0]<<ADP[0]*BDP[2];
### CDP[6] << CDP[6] + Pss[0]
CDP[6]+Pss[0]<<CDP[6]+Pss[0]
CDP[6]<<CDP[6]+Pss[0];
### CDP[8] << CDP[8] + Pss[0]
CDP[8]+Pss[0]<<CDP[8]+Pss[0]
CDP[8]<<CDP[8]+Pss[0];
### Pss[0] << (ADP[1] + ADP[4]) * (BDP[2] + BDP[5] + BDP[8])
Ts[0]<<ADP[1]+ADP[4]
Ts[1]<<BDP[2]+BDP[5]
Ts[1]<<Ts[1]+BDP[8]
Pss[0]<<Ts[0]*Ts[1];
### CDP[7] << CDP[7] + Pss[0]
CDP[7]+Pss[0]<<CDP[7]+Pss[0]
CDP[7]<<CDP[7]+Pss[0];
### Pss[0] << (ADP[4] - ADP[5]) * (BDP[3])
Ts[0]<<ADP[4]-ADP[5]
Pss[0]<<Ts[0]*BDP[3];
### CDP[1] << CDP[1] + Pss[0]
CDP[1]+Pss[0]<<CDP[1]+Pss[0]
CDP[1]<<CDP[1]+Pss[0];
### CDP[2] << CDP[2] + Pss[0]
CDP[2]+Pss[0]<<CDP[2]+Pss[0]
CDP[2]<<CDP[2]+Pss[0];
### CDP[4] << CDP[4] + Pss[0]
CDP[4]+Pss[0]<<CDP[4]+Pss[0]
CDP[4]<<CDP[4]+Pss[0];
### CDP[5] << CDP[5] + Pss[0]
CDP[5]+Pss[0]<<CDP[5]+Pss[0]
CDP[5]<<CDP[5]+Pss[0];
### CDP[7] << CDP[7] + Pss[0]
CDP[7]+Pss[0]<<CDP[7]+Pss[0]
CDP[7]<<CDP[7]+Pss[0];
### CDP[8] << CDP[8] + Pss[0]
CDP[8]+Pss[0]<<CDP[8]+Pss[0]
CDP[8]<<CDP[8]+Pss[0];
### CDP[0] << CDP[0] - Pss[0]
CDP[0]-Pss[0]<<CDP[0]-Pss[0]
CDP[0]<<CDP[0]-Pss[0];
### CDP[3] << CDP[3] - Pss[0]
CDP[3]-Pss[0]<<CDP[3]-Pss[0]
CDP[3]<<CDP[3]-Pss[0];
### CDP[6] << CDP[6] - Pss[0]
CDP[6]-Pss[0]<<CDP[6]-Pss[0]
CDP[6]<<CDP[6]-Pss[0];
### Pss[0] << (ADP[3] + ADP[4] - ADP[6] - ADP[7]) * (BDP[1])
Ts[0]<<ADP[3]+ADP[4]
Ts[0]<<Ts[0]-ADP[6]
Ts[0]<<Ts[0]-ADP[7]
Pss[0]<<Ts[0]*BDP[1];
### CDP[4] << CDP[4] + Pss[0]
CDP[4]+Pss[0]<<CDP[4]+Pss[0]
CDP[4]<<CDP[4]+Pss[0];
### Pss[0] << ((ADP[6]) * (2) + (ADP[8]) * (2) + ADP[3]) * (BDP[0] - BDP[3] - BDP[6])
Ts[0]<<ADP[6]*2+ADP[8]*2
Ts[0]<<Ts[0]+ADP[3]
Ts[1]<<BDP[0]-BDP[3]
Ts[1]<<Ts[1]-BDP[6]
Pss[0]<<Ts[0]*Ts[1];
### CDP[1] << CDP[1] + Pss[0]
CDP[1]+Pss[0]<<CDP[1]+Pss[0]
CDP[1]<<CDP[1]+Pss[0];
### Pss[0] << (ADP[4] - ADP[7]) * (BDP[1] - BDP[4] - BDP[7])
Ts[0]<<ADP[4]-ADP[7]
Ts[1]<<BDP[1]-BDP[4]
Ts[1]<<Ts[1]-BDP[7]
Pss[0]<<Ts[0]*Ts[1];
### CDP[4] << CDP[4] - Pss[0]
CDP[4]-Pss[0]<<CDP[4]-Pss[0]
CDP[4]<<CDP[4]-Pss[0];
### Pss[0] << (ADP[0] - ADP[6]) * ((BDP[3]) * (2) + BDP[0] + BDP[8] - BDP[1] - BDP[2] - BDP[4] - BDP[5] - BDP[6])
Ts[0]<<ADP[0]-ADP[6]
Ts[1]<<BDP[3]*2+BDP[0]
Ts[1]<<Ts[1]+BDP[8]
Ts[1]<<Ts[1]-BDP[1]
Ts[1]<<Ts[1]-BDP[2]
Ts[1]<<Ts[1]-BDP[4]
Ts[1]<<Ts[1]-BDP[5]
Ts[1]<<Ts[1]-BDP[6]
Pss[0]<<Ts[0]*Ts[1];
### CDP[8] << CDP[8] + Pss[0]
CDP[8]+Pss[0]<<CDP[8]+Pss[0]
CDP[8]<<CDP[8]+Pss[0];
### Pss[0] << (ADP[1] + ADP[4] - ADP[3]) * (BDP[2])
Ts[0]<<ADP[1]+ADP[4]
Ts[0]<<Ts[0]-ADP[3]
Pss[0]<<Ts[0]*BDP[2];
### CDP[7] << CDP[7] - Pss[0]
CDP[7]-Pss[0]<<CDP[7]-Pss[0]
CDP[7]<<CDP[7]-Pss[0];
### Pss[0] << (ADP[2]) * (BDP[7] - BDP[8])
Ts[1]<<BDP[7]-BDP[8]
Pss[0]<<ADP[2]*Ts[1];
### CDP[3] << CDP[3] + Pss[0]
CDP[3]+Pss[0]<<CDP[3]+Pss[0]
CDP[3]<<CDP[3]+Pss[0];
### Pss[0] << ((ADP[6]) * (2) + (ADP[8]) * (2) + ADP[3] + ADP[5]) * (BDP[3] + BDP[6])
Ts[0]<<ADP[6]*2+ADP[8]*2
Ts[0]<<Ts[0]+ADP[3]
Ts[0]<<Ts[0]+ADP[5]
Ts[1]<<BDP[3]+BDP[6]
Pss[0]<<Ts[0]*Ts[1];
### CDP[1] << CDP[1] + Pss[0]
CDP[1]+Pss[0]<<CDP[1]+Pss[0]
CDP[1]<<CDP[1]+Pss[0];
## free free(Pss[0]); free(Ts[0]); free(Ts[1]); 
> /home/paolo/MatrixFlow/Examples/play_3.py(101)<module>()
-> print(G3.pretty__C())
(Pdb) // Variables declaration 
double* ADP[9]; ADP[0]= A+60*0 +0;ADP[1]= A+60*0 +20;ADP[2]= A+60*0 +40;ADP[3]= A+60*20 +0;ADP[4]= A+60*20 +20;ADP[5]= A+60*20 +40;ADP[6]= A+60*40 +0;ADP[7]= A+60*40 +20;ADP[8]= A+60*40 +40;
double* BDP[9]; BDP[0]= B+60*0 +0;BDP[1]= B+60*0 +20;BDP[2]= B+60*0 +40;BDP[3]= B+60*20 +0;BDP[4]= B+60*20 +20;BDP[5]= B+60*20 +40;BDP[6]= B+60*40 +0;BDP[7]= B+60*40 +20;BDP[8]= B+60*40 +40;
double* CDP[9]; CDP[0]= C+60*0 +0;CDP[1]= C+60*20 +0;CDP[2]= C+60*40 +0;CDP[3]= C+60*0 +20;CDP[4]= C+60*20 +20;CDP[5]= C+60*40 +20;CDP[6]= C+60*0 +40;CDP[7]= C+60*20 +40;CDP[8]= C+60*40 +40;
double* Pss[1]; Pss[0]= (double*)malloc (20*20*sizeof(double));
double* Ts[2]; Ts[0]= (double*)malloc (20*20*sizeof(double));Ts[1]= (double*)malloc (20*20*sizeof(double));
// Constant declaration 
double z_0=0,z_1=1,z_2=-1,z_3=2,z_4=-2,;
// code 
// Pss[0] << (ADP[7]) * (BDP[1] + BDP[4] - BDP[3])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, BDP[1], 60,  BDP[4], 60, &z_1,  Ts[1], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[1], 20,  BDP[3], 60, &z_2,  Ts[1], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, ADP[7], 60, Ts[1], 20,  zero, Pss[0], 20) 
// CDP[4] << CDP[4] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[4], 60,  Pss[0], 20, &z_1,  CDP[4], 20) 
// CDP[5] << CDP[5] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[5], 60,  Pss[0], 20, &z_1,  CDP[5], 20) 
// CDP[8] << CDP[8] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[8], 60,  Pss[0], 20, &z_2,  CDP[8], 20) 
// Pss[0] << (ADP[0] + ADP[7] - ADP[6]) * (BDP[1] + BDP[4] + BDP[5] + (BDP[3]) * (-2))
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, ADP[0], 60,  ADP[7], 60, &z_1,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[6], 60, &z_2,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, BDP[1], 60,  BDP[4], 60, &z_1,  Ts[1], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[1], 20,  BDP[5], 60, &z_1,  Ts[1], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[1], 20,  BDP[3], 60, &z_4,  Ts[1], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, Ts[1], 20,  zero, Pss[0], 20) 
// CDP[3] << CDP[3] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[3], 60,  Pss[0], 20, &z_1,  CDP[3], 20) 
// CDP[8] << CDP[8] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[8], 60,  Pss[0], 20, &z_1,  CDP[8], 20) 
// Pss[0] << (ADP[4] - ADP[5] - ADP[7]) * (BDP[3] + BDP[7])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, ADP[4], 60,  ADP[5], 60, &z_2,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[7], 60, &z_2,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, BDP[3], 60,  BDP[7], 60, &z_1,  Ts[1], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, Ts[1], 20,  zero, Pss[0], 20) 
// CDP[2] << CDP[2] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[2], 60,  Pss[0], 20, &z_2,  CDP[2], 20) 
// CDP[4] << CDP[4] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[4], 60,  Pss[0], 20, &z_2,  CDP[4], 20) 
// CDP[5] << CDP[5] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[5], 60,  Pss[0], 20, &z_2,  CDP[5], 20) 
// CDP[8] << CDP[8] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[8], 60,  Pss[0], 20, &z_2,  CDP[8], 20) 
// Pss[0] << (ADP[1]) * (BDP[3] - BDP[5])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, BDP[3], 60,  BDP[5], 60, &z_2,  Ts[1], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, ADP[1], 60, Ts[1], 20,  zero, Pss[0], 20) 
// CDP[3] << CDP[3] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[3], 60,  Pss[0], 20, &z_1,  CDP[3], 20) 
// CDP[7] << CDP[7] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[7], 60,  Pss[0], 20, &z_1,  CDP[7], 20) 
// CDP[6] << CDP[6] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[6], 60,  Pss[0], 20, &z_2,  CDP[6], 20) 
// Pss[0] << (ADP[1] + ADP[4] - ADP[5]) * (BDP[3] + BDP[8])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, ADP[1], 60,  ADP[4], 60, &z_1,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[5], 60, &z_2,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, BDP[3], 60,  BDP[8], 60, &z_1,  Ts[1], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, Ts[1], 20,  zero, Pss[0], 20) 
// CDP[0] << CDP[0] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[0], 60,  Pss[0], 20, &z_1,  CDP[0], 20) 
// CDP[3] << CDP[3] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[3], 60,  Pss[0], 20, &z_1,  CDP[3], 20) 
// CDP[6] << CDP[6] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[6], 60,  Pss[0], 20, &z_1,  CDP[6], 20) 
// CDP[7] << CDP[7] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[7], 60,  Pss[0], 20, &z_2,  CDP[7], 20) 
// Pss[0] << (ADP[4] + ADP[8] - ADP[5] - ADP[7]) * (BDP[7])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, ADP[4], 60,  ADP[8], 60, &z_1,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[5], 60, &z_2,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[7], 60, &z_2,  Ts[0], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, BDP[7], 60,  zero, Pss[0], 20) 
// CDP[2] << CDP[2] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[2], 60,  Pss[0], 20, &z_1,  CDP[2], 20) 
// CDP[5] << CDP[5] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[5], 60,  Pss[0], 20, &z_1,  CDP[5], 20) 
// CDP[8] << CDP[8] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[8], 60,  Pss[0], 20, &z_1,  CDP[8], 20) 
// Pss[0] << (ADP[8]) * (BDP[0] + BDP[7] - BDP[6])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, BDP[0], 60,  BDP[7], 60, &z_1,  Ts[1], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[1], 20,  BDP[6], 60, &z_2,  Ts[1], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, ADP[8], 60, Ts[1], 20,  zero, Pss[0], 20) 
// CDP[2] << CDP[2] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[2], 60,  Pss[0], 20, &z_2,  CDP[2], 20) 
// CDP[8] << CDP[8] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[8], 60,  Pss[0], 20, &z_2,  CDP[8], 20) 
// Pss[0] << (ADP[0] - ADP[6] - ADP[8]) * (BDP[0] + BDP[8] - BDP[6])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, ADP[0], 60,  ADP[6], 60, &z_2,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[8], 60, &z_2,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, BDP[0], 60,  BDP[8], 60, &z_1,  Ts[1], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[1], 20,  BDP[6], 60, &z_2,  Ts[1], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, Ts[1], 20,  zero, Pss[0], 20) 
// CDP[0] << CDP[0] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[0], 60,  Pss[0], 20, &z_1,  CDP[0], 20) 
// CDP[8] << CDP[8] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[8], 60,  Pss[0], 20, &z_2,  CDP[8], 20) 
// Pss[0] << (ADP[1] + ADP[4] - ADP[2] - ADP[5]) * (BDP[8])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, ADP[1], 60,  ADP[4], 60, &z_1,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[2], 60, &z_2,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[5], 60, &z_2,  Ts[0], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, BDP[8], 60,  zero, Pss[0], 20) 
// CDP[0] << CDP[0] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[0], 60,  Pss[0], 20, &z_2,  CDP[0], 20) 
// CDP[3] << CDP[3] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[3], 60,  Pss[0], 20, &z_2,  CDP[3], 20) 
// CDP[6] << CDP[6] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[6], 60,  Pss[0], 20, &z_2,  CDP[6], 20) 
// Pss[0] << (ADP[6] - ADP[7]) * (BDP[1])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, ADP[6], 60,  ADP[7], 60, &z_2,  Ts[0], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, BDP[1], 60,  zero, Pss[0], 20) 
// CDP[3] << CDP[3] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[3], 60,  Pss[0], 20, &z_1,  CDP[3], 20) 
// CDP[4] << CDP[4] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[4], 60,  Pss[0], 20, &z_1,  CDP[4], 20) 
// CDP[5] << CDP[5] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[5], 60,  Pss[0], 20, &z_1,  CDP[5], 20) 
// Pss[0] << (ADP[6] + ADP[8]) * (BDP[0])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, ADP[6], 60,  ADP[8], 60, &z_1,  Ts[0], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, BDP[0], 60,  zero, Pss[0], 20) 
// CDP[0] << CDP[0] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[0], 60,  Pss[0], 20, &z_1,  CDP[0], 20) 
// CDP[2] << CDP[2] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[2], 60,  Pss[0], 20, &z_1,  CDP[2], 20) 
// CDP[1] << CDP[1] + (Pss[0]) * (-2)
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[1], 60,  Pss[0], 20, &z_4,  CDP[1], 20) 
// Pss[0] << (ADP[0] + ADP[7] - ADP[1] - ADP[6]) * ((BDP[3]) * (2) - BDP[4] - BDP[5])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, ADP[0], 60,  ADP[7], 60, &z_1,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[1], 60, &z_2,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[6], 60, &z_2,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_3, BDP[3], 60,  BDP[4], 60, &z_2,  Ts[1], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[1], 20,  BDP[5], 60, &z_2,  Ts[1], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, Ts[1], 20,  zero, Pss[0], 20) 
// CDP[3] << CDP[3] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[3], 60,  Pss[0], 20, &z_1,  CDP[3], 20) 
// Pss[0] << (ADP[0] + ADP[2] - ADP[6] - ADP[8]) * (BDP[6] - BDP[8])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, ADP[0], 60,  ADP[2], 60, &z_1,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[6], 60, &z_2,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[8], 60, &z_2,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, BDP[6], 60,  BDP[8], 60, &z_2,  Ts[1], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, Ts[1], 20,  zero, Pss[0], 20) 
// CDP[0] << CDP[0] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[0], 60,  Pss[0], 20, &z_1,  CDP[0], 20) 
// Pss[0] << (ADP[0]) * (BDP[2])
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, ADP[0], 60, BDP[2], 60,  zero, Pss[0], 20) 
// CDP[6] << CDP[6] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[6], 60,  Pss[0], 20, &z_1,  CDP[6], 20) 
// CDP[8] << CDP[8] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[8], 60,  Pss[0], 20, &z_1,  CDP[8], 20) 
// Pss[0] << (ADP[1] + ADP[4]) * (BDP[2] + BDP[5] + BDP[8])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, ADP[1], 60,  ADP[4], 60, &z_1,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, BDP[2], 60,  BDP[5], 60, &z_1,  Ts[1], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[1], 20,  BDP[8], 60, &z_1,  Ts[1], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, Ts[1], 20,  zero, Pss[0], 20) 
// CDP[7] << CDP[7] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[7], 60,  Pss[0], 20, &z_1,  CDP[7], 20) 
// Pss[0] << (ADP[4] - ADP[5]) * (BDP[3])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, ADP[4], 60,  ADP[5], 60, &z_2,  Ts[0], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, BDP[3], 60,  zero, Pss[0], 20) 
// CDP[1] << CDP[1] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[1], 60,  Pss[0], 20, &z_1,  CDP[1], 20) 
// CDP[2] << CDP[2] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[2], 60,  Pss[0], 20, &z_1,  CDP[2], 20) 
// CDP[4] << CDP[4] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[4], 60,  Pss[0], 20, &z_1,  CDP[4], 20) 
// CDP[5] << CDP[5] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[5], 60,  Pss[0], 20, &z_1,  CDP[5], 20) 
// CDP[7] << CDP[7] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[7], 60,  Pss[0], 20, &z_1,  CDP[7], 20) 
// CDP[8] << CDP[8] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[8], 60,  Pss[0], 20, &z_1,  CDP[8], 20) 
// CDP[0] << CDP[0] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[0], 60,  Pss[0], 20, &z_2,  CDP[0], 20) 
// CDP[3] << CDP[3] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[3], 60,  Pss[0], 20, &z_2,  CDP[3], 20) 
// CDP[6] << CDP[6] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[6], 60,  Pss[0], 20, &z_2,  CDP[6], 20) 
// Pss[0] << (ADP[3] + ADP[4] - ADP[6] - ADP[7]) * (BDP[1])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, ADP[3], 60,  ADP[4], 60, &z_1,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[6], 60, &z_2,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[7], 60, &z_2,  Ts[0], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, BDP[1], 60,  zero, Pss[0], 20) 
// CDP[4] << CDP[4] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[4], 60,  Pss[0], 20, &z_1,  CDP[4], 20) 
// Pss[0] << ((ADP[6]) * (2) + (ADP[8]) * (2) + ADP[3]) * (BDP[0] - BDP[3] - BDP[6])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_3, ADP[6], 60,  ADP[8], 60, &z_3,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[3], 60, &z_1,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, BDP[0], 60,  BDP[3], 60, &z_2,  Ts[1], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[1], 20,  BDP[6], 60, &z_2,  Ts[1], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, Ts[1], 20,  zero, Pss[0], 20) 
// CDP[1] << CDP[1] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[1], 60,  Pss[0], 20, &z_1,  CDP[1], 20) 
// Pss[0] << (ADP[4] - ADP[7]) * (BDP[1] - BDP[4] - BDP[7])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, ADP[4], 60,  ADP[7], 60, &z_2,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, BDP[1], 60,  BDP[4], 60, &z_2,  Ts[1], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[1], 20,  BDP[7], 60, &z_2,  Ts[1], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, Ts[1], 20,  zero, Pss[0], 20) 
// CDP[4] << CDP[4] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[4], 60,  Pss[0], 20, &z_2,  CDP[4], 20) 
// Pss[0] << (ADP[0] - ADP[6]) * ((BDP[3]) * (2) + BDP[0] + BDP[8] - BDP[1] - BDP[2] - BDP[4] - BDP[5] - BDP[6])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, ADP[0], 60,  ADP[6], 60, &z_2,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_3, BDP[3], 60,  BDP[0], 60, &z_1,  Ts[1], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[1], 20,  BDP[8], 60, &z_1,  Ts[1], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[1], 20,  BDP[1], 60, &z_2,  Ts[1], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[1], 20,  BDP[2], 60, &z_2,  Ts[1], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[1], 20,  BDP[4], 60, &z_2,  Ts[1], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[1], 20,  BDP[5], 60, &z_2,  Ts[1], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[1], 20,  BDP[6], 60, &z_2,  Ts[1], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, Ts[1], 20,  zero, Pss[0], 20) 
// CDP[8] << CDP[8] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[8], 60,  Pss[0], 20, &z_1,  CDP[8], 20) 
// Pss[0] << (ADP[1] + ADP[4] - ADP[3]) * (BDP[2])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, ADP[1], 60,  ADP[4], 60, &z_1,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[3], 60, &z_2,  Ts[0], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, BDP[2], 60,  zero, Pss[0], 20) 
// CDP[7] << CDP[7] - Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[7], 60,  Pss[0], 20, &z_2,  CDP[7], 20) 
// Pss[0] << (ADP[2]) * (BDP[7] - BDP[8])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, BDP[7], 60,  BDP[8], 60, &z_2,  Ts[1], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, ADP[2], 60, Ts[1], 20,  zero, Pss[0], 20) 
// CDP[3] << CDP[3] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[3], 60,  Pss[0], 20, &z_1,  CDP[3], 20) 
// Pss[0] << ((ADP[6]) * (2) + (ADP[8]) * (2) + ADP[3] + ADP[5]) * (BDP[3] + BDP[6])
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_3, ADP[6], 60,  ADP[8], 60, &z_3,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[3], 60, &z_1,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, Ts[0], 20,  ADP[5], 60, &z_1,  Ts[0], 20) 
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, BDP[3], 60,  BDP[6], 60, &z_1,  Ts[1], 20) 
rocblas_dgemm( gpu0, 'n', 'n', 20, 20, 20,  &z_1, Ts[0], 20, Ts[1], 20,  zero, Pss[0], 20) 
// CDP[1] << CDP[1] + Pss[0]
rocblas_dgema( gpu0, 'n', 'n', 20, 20, 20  &z_1, CDP[1], 60,  Pss[0], 20, &z_1,  CDP[1], 20) 
// free 
free(Pss[0]); free(Ts[0]); free(Ts[1]); 
Maximum Error 1.4210854715202004e-14
