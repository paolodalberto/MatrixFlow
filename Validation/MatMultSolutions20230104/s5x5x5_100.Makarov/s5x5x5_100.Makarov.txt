#
#  Yacas script s5x5x5_100.Makarov.txt created 11 Nov 2012 17:56:48
#
#  Makarov solution
#
#  Fast matrix multiplication method for 5x5x5 matrices.
#
#  intermediate products: 100
#
#  literal 0 from mod2: 6613
#  literal 1 from mod2: 887
#  literal +1 from rev: 568
#  literal -1 from rev: 319

P01 := (a11+a12-a15-a21-a22-a31-a32+a41+a42) * (b12);
P02 := (a11+a12-a13-a14-a21-a22+a23+a24-a51-a52) * (b12+b14);
P03 := (-a13-a14+a23+a24+a33+a34-a35-a43-a44) * (b32);
P04 := (-a31-a32+a33+a34+a41+a42-a43-a44-a53-a54) * (b34);
P05 := (-a15-a53-a54+a55) * (b52+b54);
P06 := (-a35-a51-a52+a55) * (b54);
P07 := (a13+a14-a23-a24) * (b12+b14+b32+b34);
P08 := (-a13-a14+a23+a24+a31+a32-a41-a42) * (b12+b14+b34);
P09 := (-a31-a32+a41+a42) * (b14+b34);
P10 := (a53+a54) * (b32+b34+b52+b54);
P11 := (a35-a53-a54) * (b32+b52+b54);
P12 := (-a35) * (b32+b52);
P13 := (-a15+a51+a52) * (b12-b54);
P14 := (-a51-a52) * (b14+b54);
P15 := (a15) * (b12+b52);
P16 := (a34-a44) * (b14-b24-b34+b44);
P17 := (a12-a22-a45) * (-b14+b24-b52);
P18 := (a52+a54) * (b32-b42);
P19 := (a14-a24) * (-b32+b42+b52);
P20 := (-a12+a14+a22-a24+a25) * (b52);
P21 := (a25-a45) * (-b52+b54);
P22 := (a14-a24+a34-a44-a54) * (b32-b34-b42+b44);
P23 := (-a32-a34+a42+a44+a45) * (b14-b24);
P24 := (a52) * (b12-b22-b32+b42);
P25 := (a45) * (b14-b24+b54);
P26 := (a14-a24) * (-b34+b44+b52);
P27 := (-a12+a22) * (-b12+b22-b52);
P28 := (-a34+a44-a52) * (b14-b24-b32+b42);
P29 := (a12-a22-a32+a42+a52) * (b12-b14-b22+b24);
P30 := (a11) * (b13);
P31 := (a13) * (b33);
P32 := (a15) * (b53);
P33 := (-a11+a31+a35) * (-b11+b13+b51);
P34 := (-a13+a33+a35) * (b33-b35+b55);
P35 := (-a13+a53+a55) * (-b31+b33+b51);
P36 := (-a11+a51+a55) * (b13-b15+b55);
P37 := (a31+a35) * (b11-b13);
P38 := (a33+a35) * (-b33+b35);
P39 := (a53+a55) * (b31-b33);
P40 := (a51+a55) * (-b13+b15);
P41 := (a11-a31) * (-b11+b51);
P42 := (a13-a33) * (-b35+b55);
P43 := (a13-a53) * (-b31+b51);
P44 := (a11-a51) * (-b15+b55);
P45 := (a33) * (b31);
P46 := (a31) * (b15);
P47 := (a51) * (b11);
P48 := (a53) * (b35);
P49 := (a11+a13+a15-a31-a35-a53-a55) * (b51);
P50 := (a11+a13+a15-a33-a35-a51-a55) * (b55);
P51 := (a35) * (b11-b13-b33+b35-b51+b53-b55);
P52 := (a55) * (-b13+b15+b31-b33-b51+b53-b55);
P53 := (a21) * (b11-b12-b13+b14-b21+b22+b23-b24-b51+b52);
P54 := (a21+a41) * (b11-b12-b15-b21+b22+b25-b31+b32+b41-b42);
P55 := (a23) * (-b31+b32+b33-b34+b41-b42-b43+b44-b53+b54);
P56 := (a43) * (-b13+b14+b23-b24+b33-b34-b35-b43+b44+b45);
P57 := (a25+a45) * (-b35+b45-b51+b52+b55);
P58 := (a45) * (-b15+b25-b53+b54+b55);
P59 := (a21+a23+a41+a43) * (b31-b32-b41+b42);
P60 := (a21+a41+a43) * (b13-b14-b23+b24-b31+b32+b41-b42);
P61 := (a41+a43) * (-b13+b14+b23-b24);
P62 := (a23+a25+a43+a45) * (b35-b45);
P63 := (a23+a25+a45) * (-b35+b45+b53-b54);
P64 := (a23+a25) * (-b53+b54);
P65 := (a21-a45) * (b15-b25-b51+b52);
P66 := (a41+a45) * (-b15+b25);
P67 := (a21+a25) * (b51-b52);
P68 := (a14-a23-a24-a34+a43+a44) * (-b32-b34-b41+b42-b43+b44);
P69 := (a12-a21-a22+a34-a43-a44) * (-b12-b21+b22-b34-b43+b44);
P70 := (a12-a21-a22-a32+a41+a42) * (-b12-b14-b21+b22-b23+b24);
P71 := (a12+a14-a21-a22-a23-a24) * (-b34-b43+b44);
P72 := (a12-a21-a22) * (-b14-b23+b24+b34+b43-b44);
P73 := (a34-a43-a44) * (b12+b21-b22-b32-b41+b42);
P74 := (a32+a34-a41-a42-a43-a44) * (-b12-b21+b22);
P75 := (a12-a14) * (b21);
P76 := (a14) * (b21+b41);
P77 := (a32) * (b23);
P78 := (a34) * (b43);
P79 := (a52) * (b25+b45);
P80 := (-a52+a54) * (b45);
P81 := (a12+a32) * (b21+b23+b41+b43);
P82 := (a12-a14+a32) * (b21+b41+b43);
P83 := (a12-a14+a32-a34) * (b41+b43);
P84 := (a34+a54) * (b23+b25+b43+b45);
P85 := (a34-a52+a54) * (b23+b25+b45);
P86 := (-a32+a34-a52+a54) * (b23+b25);
P87 := (a14+a52) * (b21-b45);
P88 := (-a14-a54) * (b41+b45);
P89 := (a12+a52) * (b21+b25);
P90 := (a23+a24-a43-a44) * (-b41+b42-b43+b44);
P91 := (a21+a22+a43+a44) * (-b21+b22-b43+b44);
P92 := (a21+a22-a41-a42) * (-b21+b22-b23+b24);
P93 := (a21+a22+a23+a24) * (-b43+b44);
P94 := (a21+a22) * (-b23+b24+b43-b44);
P95 := (a43+a44) * (b21-b22-b41+b42);
P96 := (a41+a42+a43+a44) * (-b21+b22);
P97 := (a21+a22) * (b25);
P98 := (a23+a24) * (b45);
P99 := (a41+a42) * (b25);
P100 := (a43+a44) * (b45);

c11 := P30+P31+P33+P35+P37+P39+P49+P75+P76;
c12 := P01+P07+P08+P09+P15+P68+P69-P71+P73+P75+P76+P90+P91-P93+P95;
c13 := P30+P31+P32-P76-P77+P81-P82;
c14 := -P01+P02-P08-P09+P13-P14+P71+P72-P76-P77+P81-P82+P93+P94;
c15 := P30+P31+P34+P36+P38+P40+P50-P75-P79-P87+P89;
c21 := -P19+P20+P27+P53+P59+P60+P61+P67+P68+P69-P71+P73+P75+P76;
c22 := -P19+P20+P27+P68+P69-P71+P73+P75+P76+P90+P91-P93+P95;
c23 := -P17+P20+P21+P25-P26+P55+P59+P60+P61-P64+P71+P72-P76-P77+P81-P82;
c24 := -P17+P20+P21+P25-P26+P71+P72-P76-P77+P81-P82+P93+P94;
c25 := P57-P58-P63-P64+P65+P67+P97+P98;
c31 := P30+P33+P37+P41+P45-P75-P78+P82-P83;
c32 := P03+P07+P08+P09-P12+P73+P74-P75-P78+P82-P83+P95+P96;
c33 := P30+P31+P33+P34+P41+P42+P51+P77+P78;
c34 := P04-P09+P10+P11+P12+P69-P70+P72-P74+P77+P78+P91-P92+P94-P96;
c35 := P31+P34+P38+P42+P46-P77-P80+P85-P86;
c41 := P17-P23+P24+P27+P28-P29-P53+P54-P60-P61+P65-P66+P73+P74-P75-P78+P82-P83;
c42 := P17-P23+P24+P27+P28-P29+P73+P74-P75-P78+P82-P83+P95+P96;
c43 := -P16-P23+P25+P56-P61+P62+P63+P64+P69-P70+P72-P74+P77+P78;
c44 := -P16-P23+P25+P69-P70+P72-P74+P77+P78+P91-P92+P94-P96;
c45 := P58+P62+P63+P64-P66+P99+P100;
c51 := P31+P35+P39+P43+P47-P76-P80+P87-P88;
c52 := P05-P06-P11-P12+P13+P15-P18-P24;
c53 := P30+P31+P35+P36+P43+P44+P52-P78-P79+P84-P85;
c54 := P06+P10+P11+P12-P14+P16-P18-P19-P22+P26+P28;
c55 := P30+P36+P40+P44+P48+P79+P80;

Simplify(c11 - (a11*b11+a12*b21+a13*b31+a14*b41+a15*b51));
Simplify(c12 - (a11*b12+a12*b22+a13*b32+a14*b42+a15*b52));
Simplify(c13 - (a11*b13+a12*b23+a13*b33+a14*b43+a15*b53));
Simplify(c14 - (a11*b14+a12*b24+a13*b34+a14*b44+a15*b54));
Simplify(c15 - (a11*b15+a12*b25+a13*b35+a14*b45+a15*b55));
Simplify(c21 - (a21*b11+a22*b21+a23*b31+a24*b41+a25*b51));
Simplify(c22 - (a21*b12+a22*b22+a23*b32+a24*b42+a25*b52));
Simplify(c23 - (a21*b13+a22*b23+a23*b33+a24*b43+a25*b53));
Simplify(c24 - (a21*b14+a22*b24+a23*b34+a24*b44+a25*b54));
Simplify(c25 - (a21*b15+a22*b25+a23*b35+a24*b45+a25*b55));
Simplify(c31 - (a31*b11+a32*b21+a33*b31+a34*b41+a35*b51));
Simplify(c32 - (a31*b12+a32*b22+a33*b32+a34*b42+a35*b52));
Simplify(c33 - (a31*b13+a32*b23+a33*b33+a34*b43+a35*b53));
Simplify(c34 - (a31*b14+a32*b24+a33*b34+a34*b44+a35*b54));
Simplify(c35 - (a31*b15+a32*b25+a33*b35+a34*b45+a35*b55));
Simplify(c41 - (a41*b11+a42*b21+a43*b31+a44*b41+a45*b51));
Simplify(c42 - (a41*b12+a42*b22+a43*b32+a44*b42+a45*b52));
Simplify(c43 - (a41*b13+a42*b23+a43*b33+a44*b43+a45*b53));
Simplify(c44 - (a41*b14+a42*b24+a43*b34+a44*b44+a45*b54));
Simplify(c45 - (a41*b15+a42*b25+a43*b35+a44*b45+a45*b55));
Simplify(c51 - (a51*b11+a52*b21+a53*b31+a54*b41+a55*b51));
Simplify(c52 - (a51*b12+a52*b22+a53*b32+a54*b42+a55*b52));
Simplify(c53 - (a51*b13+a52*b23+a53*b33+a54*b43+a55*b53));
Simplify(c54 - (a51*b14+a52*b24+a53*b34+a54*b44+a55*b54));
Simplify(c55 - (a51*b15+a52*b25+a53*b35+a54*b45+a55*b55));

#  Yacas detects no errors. OK!

#  Rank of 100x100 matrix H'*H is 100

#  No linear dependencies between intermediate products found

#  add operations: 404
#  sub operations: 258

#
#  end of 5x5x5 solution s5x5x5_100.Makarov.txt
#
