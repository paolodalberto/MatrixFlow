
#
# Simplified Yacas script 's5x5x5_100.Makarov.simplified.txt' created 04-Jan-2023 14:39:39
#
# Matrix multiplication method for 5x5x5_100
#
# Operation count was reduced by 223 add/subtract operations:
#
#         original  now
# a terms:  194  => 123
# b terms:  203  => 124
# c terms:  262  => 189
# ---------------------------
# total:    659  => 436
#

#
# Intermediate products: 100
#

#
# Auxiliary variables:
#
F1 := a12 - a21 - a22;
F2 := - a32 + a41 + a42;
F3 := - a14 + a23 + a24;
F4 := a34 - a43 - a44;
F5 := a11 + a13 + a15 - a35 - a55;
F6 := a12 - a14;
F7 := - a51 - a52;
F8 := - a53 - a54;
F9 := a41 + a43;
F10 := a11 - a31;
F11 := - a13 + a33;
F12 := a25 + a45;
F13 := - a52 + a54;
F14 := - a22 + a42;
F15 := a11 - a51;
F16 := - a32 + a34;
F17 := a42 + a44;
F18 := a12 + a52;
F19 := a53 + a55;
F20 := a21 + a23;

G1 := b14 - b24;
G2 := b32 - b42;
G3 := - b12 - b21 + b22;
G4 := - b34 - b43 + b44;
G5 := - b11 + b13 + b51;
G6 := b33 - b35;
G7 := - b31 + b33;
G8 := - b15 + b55;
G9 := - b53 + b54;
G10 := - b41 - b43;
G11 := b12 + b14;
G12 := b52 + b54;
G13 := - b13 + b23;
G14 := - b51 + b52;
G15 := - b15 + b25;
G16 := - b31 + b41;
G17 := - b35 + b45;
G18 := b25 + b45;
G19 := b32 + b34;
G20 := b12 + b52;
G21 := b23 - b24;

#
# Product terms:
#
P001 := (- a15 + F1 + F10 + F2) * b12;
P002 := (a11 - a13 + F1 + F3 + F7) * G11;
P003 := (- a35 + F11 + F3 + F4) * b32;
P004 := (- a31 + a33 + F2 + F4 + F8) * b34;
P005 := (- a15 + a55 + F8) * G12;
P006 := (- a35 + a55 + F7) * b54;
P007 := (a13 - F3) * (G11 + G19);
P008 := (- a13 + a31 - F2 + F3) * (b34 + G11);
P009 := (- a31 + F2) * (b14 + b34);
P010 := (- F8) * (G12 + G19);
P011 := (a35 + F8) * (b32 + G12);
P012 := (- a35) * (b32 + b52);
P013 := (- a15 - F7) * (b12 - b54);
P014 := F7 * (b14 + b54);
P015 := a15 * G20;
P016 := (a34 - a44) * (- b34 + b44 + G1);
P017 := (a12 - a22 - a45) * (- b52 - G1);
P018 := (a52 + a54) * G2;
P019 := (a14 - a24) * (b52 - G2);
P020 := (a22 - a24 + a25 - F6) * b52;
P021 := (a25 - a45) * (- b52 + b54);
P022 := (a14 - a24 + a34 - a44 - a54) * (- b34 + b44 + G2);
P023 := (- a32 - a34 + a45 + F17) * G1;
P024 := a52 * (b12 - b22 - G2);
P025 := a45 * (b54 + G1);
P026 := (a14 - a24) * (- b34 + b44 + b52);
P027 := (- a12 + a22) * (b22 - G20);
P028 := (- a34 + a44 - a52) * (G1 - G2);
P029 := (- a32 + F14 + F18) * (b12 - b22 - G1);
P030 := a11 * b13;
P031 := a13 * b33;
P032 := a15 * b53;
P033 := (a35 - F10) * G5;
P034 := (a35 + F11) * (b55 + G6);
P035 := (- a13 + F19) * (b51 + G7);
P036 := (a55 - F15) * (b13 + G8);
P037 := (a31 + a35) * (b11 - b13);
P038 := (a33 + a35) * (- G6);
P039 := F19 * (- G7);
P040 := (a51 + a55) * (- b13 + b15);
P041 := F10 * (- b11 + b51);
P042 := (- F11) * (- b35 + b55);
P043 := (a13 - a53) * (- b31 + b51);
P044 := F15 * G8;
P045 := a33 * b31;
P046 := a31 * b15;
P047 := a51 * b11;
P048 := a53 * b35;
P049 := (- a31 - a53 + F5) * b51;
P050 := (- a33 - a51 + F5) * b55;
P051 := a35 * (b53 - b55 - G5 - G6);
P052 := a55 * (- b13 - b51 + b53 - G7 - G8);
P053 := a21 * (b23 + b52 + G1 + G3 - G5);
P054 := (a21 + a41) * (b11 + G15 + G16 + G2 + G3);
P055 := a23 * (b41 + G2 + G4 + G7 + G9);
P056 := a43 * (b45 + G1 + G13 + G4 + G6);
P057 := F12 * (b55 + G14 + G17);
P058 := a45 * (b25 + G8 + G9);
P059 := (F20 + F9) * (- G16 - G2);
P060 := (a21 + F9) * (- G1 - G13 + G16 + G2);
P061 := F9 * (G1 + G13);
P062 := (a23 + a43 + F12) * (- G17);
P063 := (a23 + F12) * (G17 - G9);
P064 := (a23 + a25) * G9;
P065 := (a21 - a45) * (G14 - G15);
P066 := (a41 + a45) * G15;
P067 := (a21 + a25) * (- G14);
P068 := (- F3 - F4) * (- b41 - G2 + G4);
P069 := (F1 + F4) * (G3 + G4);
P070 := (F1 + F2) * (- b23 - G1 + G3);
P071 := (F1 - F3) * G4;
P072 := F1 * (- b23 - G1 - G4);
P073 := F4 * (- b41 - G2 - G3);
P074 := (- F2 + F4) * G3;
P075 := F6 * b21;
P076 := a14 * (b21 + b41);
P077 := a32 * b23;
P078 := a34 * b43;
P079 := a52 * G18;
P080 := F13 * b45;
P081 := (a12 + a32) * (b21 + b23 - G10);
P082 := (a32 + F6) * (b21 - G10);
P083 := (- F16 + F6) * (- G10);
P084 := (a34 + a54) * (b23 + b43 + G18);
P085 := (a34 + F13) * (b23 + G18);
P086 := (F13 + F16) * (b23 + b25);
P087 := (a14 + a52) * (b21 - b45);
P088 := (- a14 - a54) * (b41 + b45);
P089 := F18 * (b21 + b25);
P090 := (a23 + a24 - a43 - a44) * (b42 + b44 + G10);
P091 := (a21 + a22 + a43 + a44) * (- b21 + b22 - b43 + b44);
P092 := (a21 - a41 - F14) * (- b21 + b22 - G21);
P093 := (a22 + a24 + F20) * (- b43 + b44);
P094 := (a21 + a22) * (b43 - b44 - G21);
P095 := (a43 + a44) * (b21 - b22 - b41 + b42);
P096 := (F17 + F9) * (- b21 + b22);
P097 := (a21 + a22) * b25;
P098 := (a23 + a24) * b45;
P099 := (a41 + a42) * b25;
P100 := (a43 + a44) * b45;

#
# Auxiliary variables for sums of products:
#
T1 := P017 - P023 + P024 + P027 + P028 - P029 + P073 + P074 - P075 - P078 + P082 - P083;
T2 := P068 + P069 - P071 + P073 + P075 + P076;
T3 := P071 + P072 - P076 - P077 + P081 - P082;
T4 := P069 - P070 + P072 - P074 + P077 + P078;
T5 := P030 + P031;
T6 := - P017 + P020 + P021 + P025 - P026;
T7 := P001 + P008 + P009 - P093;
T8 := P091 - P092 + P094 - P096;
T9 := P090 + P091 + P095;
T10 := P060 + P061;
T11 := - P019 + P020 + P027;
T12 := - P063 - P064;
T13 := P011 + P012;
T14 := - P016 - P023 + P025;
T15 := P033 + P037;
T16 := P035 + P039;
T17 := P034 + P038;
T18 := P036 + P040;
T19 := P095 + P096;
T20 := P031 - P080;

#
# Target matrix sums of products:
#
c11 := P049 + P075 + P076 + T15 + T16 + T5;
c12 := P007 + P015 + T2 + T7 + T9;
c13 := P032 - P076 - P077 + P081 - P082 + T5;
c14 := P002 + P013 - P014 + P094 + T3 - T7;
c15 := P050 - P075 - P079 - P087 + P089 + T17 + T18 + T5;
c21 := P053 + P059 + P067 + T10 + T11 + T2;
c22 := - P093 + T11 + T2 + T9;
c23 := P055 + P059 - P064 + T10 + T3 + T6;
c24 := P093 + P094 + T3 + T6;
c25 := P057 - P058 + P065 + P067 + P097 + P098 + T12;
c31 := P030 + P041 + P045 - P075 - P078 + P082 - P083 + T15;
c32 := P003 + P007 + P008 + P009 - P012 + P073 + P074 - P075 - P078 + P082 - P083 + T19;
c33 := P033 + P034 + P041 + P042 + P051 + P077 + P078 + T5;
c34 := P004 - P009 + P010 + T13 + T4 + T8;
c35 := P042 + P046 - P077 + P085 - P086 + T17 + T20;
c41 := - P053 + P054 + P065 - P066 + T1 - T10;
c42 := T1 + T19;
c43 := P056 - P061 + P062 - T12 + T14 + T4;
c44 := T14 + T4 + T8;
c45 := P058 + P062 - P066 + P099 + P100 - T12;
c51 := P043 + P047 - P076 + P087 - P088 + T16 + T20;
c52 := P005 - P006 + P013 + P015 - P018 - P024 - T13;
c53 := P035 + P036 + P043 + P044 + P052 - P078 - P079 + P084 - P085 + T5;
c54 := P006 + P010 - P014 + P016 - P018 - P019 - P022 + P026 + P028 + T13;
c55 := P030 + P044 + P048 + P079 + P080 + T18;


#
# Algorithm validated via prime element calculation.
#

Simplify(c11 - (a11*b11 + a12*b21 + a13*b31 + a14*b41 + a15*b51));
Simplify(c12 - (a11*b12 + a12*b22 + a13*b32 + a14*b42 + a15*b52));
Simplify(c13 - (a11*b13 + a12*b23 + a13*b33 + a14*b43 + a15*b53));
Simplify(c14 - (a11*b14 + a12*b24 + a13*b34 + a14*b44 + a15*b54));
Simplify(c15 - (a11*b15 + a12*b25 + a13*b35 + a14*b45 + a15*b55));
Simplify(c21 - (a21*b11 + a22*b21 + a23*b31 + a24*b41 + a25*b51));
Simplify(c22 - (a21*b12 + a22*b22 + a23*b32 + a24*b42 + a25*b52));
Simplify(c23 - (a21*b13 + a22*b23 + a23*b33 + a24*b43 + a25*b53));
Simplify(c24 - (a21*b14 + a22*b24 + a23*b34 + a24*b44 + a25*b54));
Simplify(c25 - (a21*b15 + a22*b25 + a23*b35 + a24*b45 + a25*b55));
Simplify(c31 - (a31*b11 + a32*b21 + a33*b31 + a34*b41 + a35*b51));
Simplify(c32 - (a31*b12 + a32*b22 + a33*b32 + a34*b42 + a35*b52));
Simplify(c33 - (a31*b13 + a32*b23 + a33*b33 + a34*b43 + a35*b53));
Simplify(c34 - (a31*b14 + a32*b24 + a33*b34 + a34*b44 + a35*b54));
Simplify(c35 - (a31*b15 + a32*b25 + a33*b35 + a34*b45 + a35*b55));
Simplify(c41 - (a41*b11 + a42*b21 + a43*b31 + a44*b41 + a45*b51));
Simplify(c42 - (a41*b12 + a42*b22 + a43*b32 + a44*b42 + a45*b52));
Simplify(c43 - (a41*b13 + a42*b23 + a43*b33 + a44*b43 + a45*b53));
Simplify(c44 - (a41*b14 + a42*b24 + a43*b34 + a44*b44 + a45*b54));
Simplify(c45 - (a41*b15 + a42*b25 + a43*b35 + a44*b45 + a45*b55));
Simplify(c51 - (a51*b11 + a52*b21 + a53*b31 + a54*b41 + a55*b51));
Simplify(c52 - (a51*b12 + a52*b22 + a53*b32 + a54*b42 + a55*b52));
Simplify(c53 - (a51*b13 + a52*b23 + a53*b33 + a54*b43 + a55*b53));
Simplify(c54 - (a51*b14 + a52*b24 + a53*b34 + a54*b44 + a55*b54));
Simplify(c55 - (a51*b15 + a52*b25 + a53*b35 + a54*b45 + a55*b55));

# Brent equation statistics about non-zero triples:
# in odd equations  [1, 3]
# in even equations [0, 2, 4]
# in kernel columns [1, 2, 4, 8]

# Algorithm properly fulfills all Brent Equations

#
# End of 5x5x5_100 solution file 's5x5x5_100.Makarov.simplified.txt'
#
