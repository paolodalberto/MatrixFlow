
#
# Simplified Yacas script 's4x4x4_49.Strassen.simplified.txt' created 04-Jan-2023 14:38:48
#
# Matrix multiplication method for 4x4x4_49
#
# Operation count was reduced by 116 add/subtract operations:
#
#         original  now
# a terms:   95  =>  55
# b terms:   95  =>  55
# c terms:  128  =>  92
# ---------------------------
# total:    318  => 202
#

#
# Intermediate products: 49
#

#
# Auxiliary variables:
#
F1 := a11 + a22;
F2 := a33 + a44;
F3 := a21 + a22;
F4 := a43 + a44;
F5 := a11 + a12;
F6 := a33 + a34;
F7 := a11 - a21;
F8 := a33 - a43;
F9 := a12 - a22;
F10 := a34 - a44;
F11 := a31 + a42;
F12 := a41 + a42;
F13 := a31 + a32;
F14 := a31 - a41;
F15 := a32 - a42;
F16 := a13 + a24;
F17 := a23 + a24;
F18 := a13 + a14;
F19 := a13 - a23;
F20 := a14 - a24;

G1 := b11 + b22;
G2 := b33 + b44;
G3 := b12 - b22;
G4 := b34 - b44;
G5 := b11 - b21;
G6 := b33 - b43;
G7 := b11 + b12;
G8 := b33 + b34;
G9 := b21 + b22;
G10 := b43 + b44;
G11 := b13 + b24;
G12 := b14 - b24;
G13 := b13 - b23;
G14 := b13 + b14;
G15 := b23 + b24;
G16 := - b31 - b42;
G17 := - b32 + b42;
G18 := - b31 + b41;
G19 := - b31 - b32;
G20 := - b41 - b42;

#
# Product terms:
#
P01 := (F1 + F2) * (G1 + G2);
P02 := (F3 + F4) * (b11 + b33);
P03 := (a11 + a33) * (G3 + G4);
P04 := (a22 + a44) * (G5 + G6);
P05 := (F5 + F6) * (b22 + b44);
P06 := (F7 + F8) * (G7 + G8);
P07 := (F10 + F9) * (G10 + G9);
P08 := (F11 + F2) * G1;
P09 := (F12 + F4) * b11;
P10 := (a31 + a33) * G3;
P11 := (a42 + a44) * G5;
P12 := (F13 + F6) * b22;
P13 := (F14 + F8) * G7;
P14 := (F10 + F15) * G9;
P15 := F1 * (G11 - G2);
P16 := F3 * (b13 - b33);
P17 := a11 * (G12 - G4);
P18 := a22 * (G13 - G6);
P19 := F5 * (b24 - b44);
P20 := F7 * (G14 - G8);
P21 := F9 * (- G10 + G15);
P22 := F2 * (G1 + G16);
P23 := F4 * (b11 - b31);
P24 := a33 * (G17 + G3);
P25 := a44 * (G18 + G5);
P26 := F6 * (b22 - b42);
P27 := F8 * (G19 + G7);
P28 := F10 * (G20 + G9);
P29 := (F1 + F16) * G2;
P30 := (F17 + F3) * b33;
P31 := (a11 + a13) * G4;
P32 := (a22 + a24) * G6;
P33 := (F18 + F5) * b44;
P34 := (F19 + F7) * G8;
P35 := (F20 + F9) * G10;
P36 := (F1 - F11) * (G1 + G11);
P37 := (- F12 + F3) * (b11 + b13);
P38 := (a11 - a31) * (G12 + G3);
P39 := (a22 - a42) * (G13 + G5);
P40 := (- F13 + F5) * (b22 + b24);
P41 := (- F14 + F7) * (G14 + G7);
P42 := (- F15 + F9) * (G15 + G9);
P43 := (F16 - F2) * (- G16 + G2);
P44 := (F17 - F4) * (b31 + b33);
P45 := (a13 - a33) * (- G17 + G4);
P46 := (a24 - a44) * (- G18 + G6);
P47 := (F18 - F6) * (b42 + b44);
P48 := (F19 - F8) * (- G19 + G8);
P49 := (- F10 + F20) * (G10 - G20);

#
# Auxiliary variables for sums of products:
#
T1 := P01 - P04 - P05 + P07;
T2 := - P22 + P25 + P26 - P28;
T3 := - P29 + P32 + P33 - P35;
T4 := P03 - P24 - P31 + P45;
T5 := P15 - P18 - P19 + P21;
T6 := P02 - P23 - P30 + P44;
T7 := P15 - P16 + P17 - P20;
T8 := P08 - P11 - P12 + P14;
T9 := P08 - P09 + P10 - P13;
T10 := P17 + P19;
T11 := P01 - P06;
T12 := - P22 + P27;
T13 := - P29 + P34;
T14 := P16 - P18;
T15 := P10 + P12;
T16 := P03 - P38;
T17 := P09 - P11;
T18 := P02 - P37;

#
# Target matrix sums of products:
#
c11 := P43 - P46 - P47 + P49 + T1 + T2 + T3;
c12 := P05 - P26 - P33 + P47 + T4;
c13 := - T3 + T5;
c14 := P31 + P33 + T10;
c21 := - P04 + P25 + P32 - P46 + T6;
c22 := P43 - P48 + T11 + T12 + T13 + T4 - T6;
c23 := P30 - P32 + T14;
c24 := - P30 + P31 - T13 + T7;
c31 := T2 + T8;
c32 := - P24 - P26 + T15;
c33 := - P36 + P39 + P40 - P42 + T1 + T5 - T8;
c34 := P05 - P40 + T10 - T15 + T16;
c41 := - P23 + P25 + T17;
c42 := P23 - P24 + T12 + T9;
c43 := - P04 + P39 + T14 - T17 + T18;
c44 := - P36 + P41 + T11 + T16 - T18 + T7 - T9;


#
# Algorithm validated via prime element calculation.
#

Simplify(c11 - (a11*b11 + a12*b21 + a13*b31 + a14*b41));
Simplify(c12 - (a11*b12 + a12*b22 + a13*b32 + a14*b42));
Simplify(c13 - (a11*b13 + a12*b23 + a13*b33 + a14*b43));
Simplify(c14 - (a11*b14 + a12*b24 + a13*b34 + a14*b44));
Simplify(c21 - (a21*b11 + a22*b21 + a23*b31 + a24*b41));
Simplify(c22 - (a21*b12 + a22*b22 + a23*b32 + a24*b42));
Simplify(c23 - (a21*b13 + a22*b23 + a23*b33 + a24*b43));
Simplify(c24 - (a21*b14 + a22*b24 + a23*b34 + a24*b44));
Simplify(c31 - (a31*b11 + a32*b21 + a33*b31 + a34*b41));
Simplify(c32 - (a31*b12 + a32*b22 + a33*b32 + a34*b42));
Simplify(c33 - (a31*b13 + a32*b23 + a33*b33 + a34*b43));
Simplify(c34 - (a31*b14 + a32*b24 + a33*b34 + a34*b44));
Simplify(c41 - (a41*b11 + a42*b21 + a43*b31 + a44*b41));
Simplify(c42 - (a41*b12 + a42*b22 + a43*b32 + a44*b42));
Simplify(c43 - (a41*b13 + a42*b23 + a43*b33 + a44*b43));
Simplify(c44 - (a41*b14 + a42*b24 + a43*b34 + a44*b44));

# Brent equation statistics about non-zero triples:
# in odd equations  [1]
# in even equations [0, 2, 4]
# in kernel columns [1, 2, 4]

# Algorithm properly fulfills all Brent Equations

#
# End of 4x4x4_49 solution file 's4x4x4_49.Strassen.simplified.txt'
#
