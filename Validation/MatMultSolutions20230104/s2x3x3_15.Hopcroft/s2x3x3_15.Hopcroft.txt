#
# Yacas script s2x3x3_15.Hopcroft.unified.txt created 13-Nov-2017 09:38:59
#
# Matrix multiplication method for 2x3x3_15
#
# Intermediate products: 15
#
P01 := a11 * (b11 - b12 - b31);
P02 := (a11 + a21) * (b11 - b13 - b21);
P03 := a12 * (- b21 + b22 - b32);
P04 := a22 * (- b12 + b22 - b23);
P05 := (a13 + a23) * (- b23 - b31 + b33);
P06 := a23 * (- b13 - b32 + b33);
P07 := (a11 + a12 + a21 + a22) * b21;
P08 := (a11 + a21 + a22) * (b12 - b21);
P09 := (a21 + a22) * (- b12);
P10 := (a12 + a13 + a22 + a23) * b23;
P11 := (a12 + a13 + a23) * (- b23 + b32);
P12 := (a12 + a13) * (- b32);
P13 := (a11 - a23) * (b13 - b31);
P14 := (a21 + a23) * (- b13);
P15 := (a11 + a13) * b31;
c11 := + P01                               + P07 + P08 + P09                               + P15;
c12 :=             + P03                   + P07 + P08 + P09             - P12;
c13 :=                         + P05 - P06                         - P11 - P12 + P13       + P15;
c21 := - P01 + P02                               - P08 - P09                   + P13 - P14;
c22 :=                   + P04                         - P09 + P10 + P11 + P12;
c23 :=                               + P06                   + P10 + P11 + P12       - P14;

Simplify(c11 - (a11*b11 + a12*b21 + a13*b31));
Simplify(c12 - (a11*b12 + a12*b22 + a13*b32));
Simplify(c13 - (a11*b13 + a12*b23 + a13*b33));
Simplify(c21 - (a21*b11 + a22*b21 + a23*b31));
Simplify(c22 - (a21*b12 + a22*b22 + a23*b32));
Simplify(c23 - (a21*b13 + a22*b23 + a23*b33));

# Statistics about non-zero triples:
# in odd equations  [1]
# in even equations [0, 2]
# in kernel columns [1, 2]

# Algorithm properly fulfills all Brent Equations

#
# End of 2x3x3_15 solution file s2x3x3_15.Hopcroft.unified.txt
#
