#
# Yacas script 's3x3x3_23.new.txt' created 07-Jul-2019 13:29:17
#
# Matrix multiplication method for 3x3x3_23
#
# Intermediate products: 23
#
P01 := (- a11 - a13 + a21) * b11;
P02 := (- a13) * (- b32);
P03 := (a32 + a33) * b32;
P04 := (- a11 - a13 - a22) * (- b13 + b21 + b23);
P05 := (- a11 - a12 - a31 - a32) * (b21 + b23);
P06 := (a31 + a33) * (b31 + b33);
P07 := (- a21) * (b11 - b12 + b21 - b22);
P08 := (- a23 + a32 + a33) * (b21 - b22 + b32);
P09 := (a11 + a12 + a31) * (- b12 + b21 + b23);
P10 := (- a12 + a22) * (- b21);
P11 := (- a11 - a13) * (- b11 - b13 + b21 + b23);
P12 := (- a31) * (b11 - b12 + b13 - b31 - b33);
P13 := (- a12) * (- b12 + b22);
P14 := (- a23 + a31 + a33) * (- b13 + b31 + b33);
P15 := (a21 - a22 - a23 + a32 + a33) * (b21 - b22);
P16 := (a21 + a22 + a23 - a31 - a33) * (- b13);
P17 := (- a32) * (b21 - b22 + b23 + b32);
P18 := (a11 + a12) * b12;
P19 := a22 * (- b13 + b23);
P20 := (- a13) * (- b11 + b31);
P21 := (- a23 + a33) * (b13 - b21 + b22 - b32 - b33);
P22 := (- a13 + a31) * (- b11 - b13 + b21 + b23 + b31 + b33);
P23 := (- a23) * (- b31);
c11 :=                   - P04                               + P10 + P11                                           - P19 - P20;
c12 :=       + P02                                                             - P13                         + P18;
c13 :=                   + P04                         + P09 - P10       + P12                               + P18 + P19 + P20       - P22;
c21 := + P01             - P04                                     + P11                                           - P19                   + P23;
c22 := + P01       + P03 - P04             + P07 - P08             + P11                   + P15                   - P19;
c23 :=                               + P06                                           - P14       - P16             + P19                   - P23;
c31 :=                         - P05             + P08 - P09             - P12       + P14             + P17 - P18             + P21       + P23;
c32 :=             + P03       - P05                   - P09                                           + P17 - P18;
c33 :=                               + P06       - P08                               - P14             - P17                   - P21       - P23;

Simplify(c11 - (a11*b11 + a12*b21 + a13*b31));
Simplify(c12 - (a11*b12 + a12*b22 + a13*b32));
Simplify(c13 - (a11*b13 + a12*b23 + a13*b33));
Simplify(c21 - (a21*b11 + a22*b21 + a23*b31));
Simplify(c22 - (a21*b12 + a22*b22 + a23*b32));
Simplify(c23 - (a21*b13 + a22*b23 + a23*b33));
Simplify(c31 - (a31*b11 + a32*b21 + a33*b31));
Simplify(c32 - (a31*b12 + a32*b22 + a33*b32));
Simplify(c33 - (a31*b13 + a32*b23 + a33*b33));

# Statistics about non-zero triples:
# in odd equations  [1, 3]
# in even equations [0, 2]
# in kernel columns [1, 2, 3, 4]

# Algorithm properly fulfills all Brent Equations

#
# End of 3x3x3_23 solution file 's3x3x3_23.new.txt'
#
