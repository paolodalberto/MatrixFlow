
#
# Simplified Yacas script 's5x5x5_99.Sedoglavic.simplified.txt' created 04-Jan-2023 14:40:52
#
# Matrix multiplication method for 5x5x5_99
#
# Operation count was reduced by 239 add/subtract operations:
#
#         original  now
# a terms:  192  => 124
# b terms:  212  => 124
# c terms:  270  => 187
# ---------------------------
# total:    674  => 435
#

#
# Intermediate products: 99
#

#
# Auxiliary variables:
#
F1 := a34 - a43 - a44;
F2 := - a12 + a21 + a22;
F3 := - a14 + a23 + a24;
F4 := a32 - a41 - a42;
F5 := a15 + a35 - a51 - a53 + a55;
F6 := - a12 + a14;
F7 := - a41 - a43;
F8 := - a34 - a54;
F9 := - a23 - a25;
F10 := a53 + a54;
F11 := - a11 + a15;
F12 := a33 - a35;
F13 := a51 + a52;
F14 := a21 + a23;
F15 := - a22 + a42;
F16 := a31 + a51;
F17 := a13 + a53;
F18 := - a24 + a44;

G1 := b12 - b22;
G2 := b14 - b24;
G3 := b34 - b44;
G4 := - b32 + b42;
G5 := b41 + b43;
G6 := b52 + b54;
G7 := b15 + b35 - b51 - b53 + b55;
G8 := b21 - b22;
G9 := - b53 + b54;
G10 := - b13 + b23;
G11 := - b35 + b45;
G12 := b31 - b41;
G13 := - b15 + b25;
G14 := - b51 + b52;
G15 := b14 + b34;
G16 := - b43 + b44;
G17 := b25 + b45;
G18 := - b23 + b24;
G19 := b21 + b23;
G20 := b11 + b51;
G21 := b31 + b51;
G22 := b13 + b53;
G23 := b33 + b53;
G24 := b11 - b21;
G25 := b33 - b43;

#
# Product terms:
#
P01 := (a35 + a45 + a51 - a55) * b54;
P02 := F6 * b21;
P03 := (- a32) * b23;
P04 := (- a34) * b43;
P05 := a14 * (b21 + b41);
P06 := (- a32 + a42) * (G2 + G3);
P07 := (a32 - F6) * (b21 + G5);
P08 := a53 * b35;
P09 := a51 * b15;
P10 := F1 * (b21 - b41 + G1 + G4);
P11 := (F2 + F3) * (- b43 - G3);
P12 := (- a14 + a24 + a32 - a42) * (G1 + G2 + G3);
P13 := (- F2) * (- b23 + b43 - G2 + G3);
P14 := a45 * (b52 - G4);
P15 := (F1 - F2) * (- b21 - b43 - G1 - G3);
P16 := (F1 + F4) * (- b21 - G1);
P17 := F9 * G9;
P18 := (a43 + a44) * (- b41 + b42 + G8);
P19 := (- a22 - a24 - F14) * G16;
P20 := (a14 - a24) * (G1 + G2 + G3 - G4);
P21 := (a21 + a22) * (- G16 + G18);
P22 := (- a32 + a34 + F6) * G5;
P23 := (a12 + a32) * (G19 + G5);
P24 := (a12 - a25 - a32 + F15) * G1;
P25 := (- a31 - F4) * G15;
P26 := F7 * (G10 + G2);
P27 := a35 * (b32 + b52);
P28 := (- a45 - a54) * (- G4 + G6);
P29 := (a21 + a22 + a43 + a44) * (G16 - G8);
P30 := (a42 + a44 - F7) * (- G8);
P31 := (- a52) * G17;
P32 := (- a35 + F16) * (- b15 + G20);
P33 := (a45 - F9) * (G11 - G9);
P34 := (- a15 + F17) * (- b35 + G21);
P35 := (a52 - a54) * b45;
P36 := (- F1 - F3) * (- G3 + G4 - G5);
P37 := (- a52) * (b54 + G2);
P38 := (a21 - F7) * (G10 + G12 + G2 + G4);
P39 := (- a35 + F10) * (b32 + G6);
P40 := (- a51 + F11) * (- b15 + G22);
P41 := (F2 + F4) * (- G1 - G19 - G2);
P42 := a25 * (b52 + G1);
P43 := (- a54) * (G3 - G4 + G6);
P44 := (- a13 + a31 + F3 + F4) * (b12 + G15);
P45 := (- a25 - a52) * (- b54 + G1);
P46 := (a53 + F12) * (- b35 + G23);
P47 := (a14 + a52) * (b21 - b45);
P48 := F16 * G20;
P49 := a45 * (b55 + G13 + G9);
P50 := (- a31 + a35) * (b11 - b15);
P51 := (a21 - a45) * (- G13 + G14);
P52 := (- a21) * (- G1 + G10 + G14 + G2 + G24);
P53 := (a21 + a25) * (- G14);
P54 := F17 * G21;
P55 := (a52 + F8) * (b23 + G17);
P56 := (- a13 + a15) * (b31 - b35);
P57 := (a43 + a45 - F9) * (- G11);
P58 := (a23 - a43 - F18) * (b42 + b44 - G5);
P59 := (- a41 - a45) * G13;
P60 := (a13 - F3) * (b12 + b32 + G15);
P61 := F10 * (b32 + b34 + G6);
P62 := (F14 - F7) * (G12 + G4);
P63 := (- a21 + a41 + F15) * (G18 - G8);
P64 := (a11 + a51) * G22;
P65 := (- a32 + a42 - a44 - F8) * G3;
P66 := F11 * (b13 - b15);
P67 := a15 * (b12 + b52);
P68 := F13 * (b14 + b54);
P69 := (- F12) * (b33 - b35);
P70 := (- a15 - a25 - a53 + a55) * G6;
P71 := (a33 + a53) * G23;
P72 := (- a14 + a34 - a45 - F18) * (- G4);
P73 := (- a31 - F11 - F2 - F4) * b12;
P74 := (- a22 + a24 + a52 - F6) * (G1 + G2);
P75 := (- a15 + F13) * (b12 - b54);
P76 := (a21 + a41) * (- G1 - G12 + G13 + G24 - G4);
P77 := a33 * b31;
P78 := a11 * b11;
P79 := (- a13 + F1 + F12 + F3) * b32;
P80 := (a14 + a54) * (b41 + b45);
P81 := (- a13 - a31 + F5) * b51;
P82 := a23 * (- G12 + G25 - G3 - G4 + G9);
P83 := a13 * b33;
P84 := (a11 - a13 - F13 - F2 + F3) * (b12 + b14);
P85 := (- F8) * (b23 + b43 + G17);
P86 := (- a11 - a33 + F5) * b53;
P87 := a43 * (G10 + G11 + G2 + G25 - G3);
P88 := a31 * b13;
P89 := a15 * (- b13 - b31 + G7);
P90 := (- a31 + a33 + F1 - F10 - F4) * b34;
P91 := a55 * b55;
P92 := (a43 + a44) * b45;
P93 := (a41 + a42) * b25;
P94 := (a32 + a52 + F8) * (b23 + b25);
P95 := (- a35) * (b11 + b33 - G7);
P96 := (a23 + a24) * b45;
P97 := (a21 + a22) * b25;
P98 := (a25 + a45) * (b55 + G11 + G14);
P99 := (a12 + a52) * (b21 + b25);

#
# Auxiliary variables for sums of products:
#
T1 := P05 + P06 + P11 + P12 + P24;
T2 := P02 + P04 + P07 + P10 + P16 + P22;
T3 := - P03 - P04 + P13 + P15 - P16 + P41;
T4 := - P02 + P10 + P15 + P18 + P19 + P29 + P36 + P58;
T5 := P03 - P07 + P23;
T6 := P05 + P11 + P25 + P44 + P73;
T7 := - P08 - P09;
T8 := P06 + P12 + P14 + P20 + P72;
T9 := - P14 - P28 + P43;
T10 := P13 + P37 + P45 + P74;
T11 := P21 + P29 - P30 + P63;
T12 := P05 - P34 - P56;
T13 := - P26 - P38;
T14 := P17 - P33;
T15 := - P04 - P46 - P69;
T16 := - P27 - P39;
T17 := P40 + P64;
T18 := - P19 + P21;
T19 := P20 + P42;
T20 := - P32 + P48;
T21 := P18 + P30;
T22 := - P06 + P65;

#
# Target matrix sums of products:
#
c11 := - P02 - P08 + P54 + P78 + T12;
c12 := P60 + P67 + T4 + T6;
c13 := - P05 - P09 - P66 + P83 + T17 + T5;
c14 := P13 + P68 + P75 + P84 + T18 + T5 - T6;
c15 := P02 + P31 - P34 - P47 + P54 + P89 + P99 + T17 + T7;
c21 := - P02 + P10 + P15 + P36 - P52 + P53 + P62 + T1 + T13 + T19;
c22 := T1 + T19 + T4;
c23 := P17 + P62 + P82 - T1 + T10 + T13 + T5;
c24 := - T1 + T10 + T18 + T5;
c25 := - P49 + P51 + P53 + P96 + P97 + P98 + T14;
c31 := P02 + P04 + P07 - P09 + P22 - P50 + P77 + T20;
c32 := P25 + P27 + P44 + P60 + P79 + T2 + T21;
c33 := - P03 - P08 + P71 + P88 + T15;
c34 := - P25 + P61 + P90 + T11 + T16 + T3;
c35 := P03 + P35 - P46 - P55 + P71 + P94 + P95 + T20 + T7;
c41 := P51 + P52 + P59 + P76 - T13 + T2 + T8;
c42 := T2 + T21 + T8;
c43 := P26 + P57 + P87 - T14 + T22 + T3 + T9;
c44 := T11 + T22 + T3 + T9;
c45 := P49 + P57 + P59 + P92 + P93 - T14;
c51 := P32 + P35 + P47 + P50 + P80 + P81 - T12 - T7;
c52 := P01 + P14 + P28 + P42 + P45 + P67 + P70 + P75 - T16;
c53 := P31 - P40 + P55 + P66 + P85 + P86 - T15 - T7;
c54 := - P01 + P37 + P61 + P68 + T16 + T9;
c55 := - P31 - P35 + P91 - T7;


#
# Algorithm validated via prime element calculation.
#

Simplify(c11 - (a11*b11 + a12*b21 + a13*b31 + a14*b41 + a15*b51));
Simplify(c12 - (a11*b12 + a12*b22 + a13*b32 + a14*b42 + a15*b52));
Simplify(c13 - (a11*b13 + a12*b23 + a13*b33 + a14*b43 + a15*b53));
Simplify(c14 - (a11*b14 + a12*b24 + a13*b34 + a14*b44 + a15*b54));
Simplify(c15 - (a11*b15 + a12*b25 + a13*b35 + a14*b45 + a15*b55));
Simplify(c21 - (a21*b11 + a22*b21 + a23*b31 + a24*b41 + a25*b51));
Simplify(c22 - (a21*b12 + a22*b22 + a23*b32 + a24*b42 + a25*b52));
Simplify(c23 - (a21*b13 + a22*b23 + a23*b33 + a24*b43 + a25*b53));
Simplify(c24 - (a21*b14 + a22*b24 + a23*b34 + a24*b44 + a25*b54));
Simplify(c25 - (a21*b15 + a22*b25 + a23*b35 + a24*b45 + a25*b55));
Simplify(c31 - (a31*b11 + a32*b21 + a33*b31 + a34*b41 + a35*b51));
Simplify(c32 - (a31*b12 + a32*b22 + a33*b32 + a34*b42 + a35*b52));
Simplify(c33 - (a31*b13 + a32*b23 + a33*b33 + a34*b43 + a35*b53));
Simplify(c34 - (a31*b14 + a32*b24 + a33*b34 + a34*b44 + a35*b54));
Simplify(c35 - (a31*b15 + a32*b25 + a33*b35 + a34*b45 + a35*b55));
Simplify(c41 - (a41*b11 + a42*b21 + a43*b31 + a44*b41 + a45*b51));
Simplify(c42 - (a41*b12 + a42*b22 + a43*b32 + a44*b42 + a45*b52));
Simplify(c43 - (a41*b13 + a42*b23 + a43*b33 + a44*b43 + a45*b53));
Simplify(c44 - (a41*b14 + a42*b24 + a43*b34 + a44*b44 + a45*b54));
Simplify(c45 - (a41*b15 + a42*b25 + a43*b35 + a44*b45 + a45*b55));
Simplify(c51 - (a51*b11 + a52*b21 + a53*b31 + a54*b41 + a55*b51));
Simplify(c52 - (a51*b12 + a52*b22 + a53*b32 + a54*b42 + a55*b52));
Simplify(c53 - (a51*b13 + a52*b23 + a53*b33 + a54*b43 + a55*b53));
Simplify(c54 - (a51*b14 + a52*b24 + a53*b34 + a54*b44 + a55*b54));
Simplify(c55 - (a51*b15 + a52*b25 + a53*b35 + a54*b45 + a55*b55));

# Brent equation statistics about non-zero triples:
# in odd equations  [1, 3]
# in even equations [0, 2, 4, 6]
# in kernel columns [1, 2, 4, 8]

# Algorithm properly fulfills all Brent Equations

#
# End of 5x5x5_99 solution file 's5x5x5_99.Sedoglavic.simplified.txt'
#
