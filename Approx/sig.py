import numpy 
import scipy



def aie(x):
    tmpx = numpy.minimum(4,x)
    tmpx = numpy.maximum(-4,tmpx)
    tmpx_abs = numpy.absolute(tmpx)

    return (1/2) + (1/4)*tmpx - (1/32)*tmpx_abs*tmpx

def Taylor_5(x) :
    return (1/2) + (1/4)*x - (1/48)*x**3 +(1/480)*x**5
def Taylor_1(x) :
    
    return (1/2) + (1/4)*x 
def Taylor_3(x) :
    
    return (1/2) + (1/4)*x - (1/48)*x**3 

def faie(x,p):
    tmpx = numpy.minimum(4,x)
    tmpx = numpy.maximum(-4,tmpx)
    tmpx_abs = numpy.absolute(tmpx)

    return p[0] + p[1]*tmpx - p[2]*tmpx_abs*tmpx

def F(x,p):
    
    r = x*0 + p[0]
    for i in range(1,p.size):
        r += p[i]*x**i
    return r

def cost(p, x, y ):

    return numpy.sum(((y-faie(x,p).astype(numpy.float16)))**2)
    #return numpy.mean(((y-faie(x,p).astype(numpy.float16))/y)**2)

def cost_2(p, x, y ):
    y[y==0] = 1
    return numpy.sum((((y-F(x,p).astype(numpy.float16)))/y)**2)
    #return numpy.mean(((y-faie(x,p).astype(numpy.float16))/y)**2)
    
def C(p,x,y,cost_function = cost, method='powell'):
    
    res = scipy.optimize.minimize(cost_function,
                                  p,
                                  args=(x,y),
                                  method=method,
                                  #bounds=((p[0]/10,p[0]),(p[1]/10,p[1]),(p[2]/10,p[2])),
                                  options={ 'disp': True})

    return res


def me(ref,y):
    return numpy.fabs(ref - y)
def mer(ref,y):
    y[ref==0] = 1
    ref[ref==0] = 1 
    return numpy.fabs((ref - y)/ref)


if __name__ == '__main__':


    #import pdb;pdb.set_trace()



    import matplotlib.pyplot as plt
    x = numpy.linspace(-6, 6, 121*1000).astype(numpy.float16)
    y = scipy.special.expit(x).astype(numpy.float16)

    p = numpy.array([ (1/2), (1/4), (1/32)] )#, (1/480)])
    print(p)

    ## current computation of the sigmoid 
    y_aie = faie(x,p.astype(numpy.float16)).astype(numpy.float16)
    
    ## looking for different coefficients 
    res = C(p,x,y,cost,'Nelder-Mead')
    print("NM", res.x.astype(numpy.float16))
    y_nm = faie(x,res.x.astype(numpy.float16)).astype(numpy.float16)

    ## looking for different coefficients 
    res = C(p,x,y,cost,'powell')
    print("PO",res.x.astype(numpy.float16))
    y_powell = faie(x,res.x.astype(numpy.float16)).astype(numpy.float16)


    
    plt.plot(x,  me(y,y_nm), label='P3'+'Nelder-Mead')
    plt.plot(x,  me(y,y_powell), label='P3'+'powell')
    plt.plot(x,  me(y,y_aie), label='aie')

    

    plt.grid()
    #plt.ylim(-2, 2)
    plt.xlabel('x')
    plt.legend()
    plt.savefig("error.png")
    plt.show()

    #L3(x) � 0.500781 + 0.14670403x + 0.001198x2 − 0.001006x3 generated by our method and T3(x) � (1/2) + (1/4)x − (1/4)x − (1/48)x3
